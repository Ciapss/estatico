/**
 * Inspired from https://github.com/guardian/sass-mq.git
 */

/**
 * // To enable support for browsers that do not support @media queries,
 * (IE <= 8, Firefox <= 3, Opera <= 9) set $mq-responsive to false
 * Create a separate stylesheet served exclusively to these browsers,
 * meaning @media queries will be rasterized, relying on the cascade itself
 */
$mq-responsive: true;

/**
 * Name your breakpoints in a way that creates a ubiquitous language
 * across team members. It will improve communication between
 * stakeholders, designers, developers, and testers.
 */
$mq-breakpoints: (
	small:  $sizeBreakpointSmall,
	medium:  $sizeBreakpointMedium,
	large: $sizeBreakpointLarge
);

/**
 * Define the breakpoint from the $mq-breakpoints list that should
 * be used as the target width when outputting a static stylesheet
 * (i.e. when $mq-responsive is set to 'false').
 */
$mq-static-breakpoint: small;

/**
 * If you want to display the currently active breakpoint in the top
 * right corner of your site during development, add the breakpoints
 * to this list, ordered by width, e.g. (mobile, tablet, desktop).
 */
$mq-show-breakpoints: (small, medium, large);


@function mq-get-breakpoint-width($name) {
	@if(map-has-key($mq-breakpoints, $name)) {
		@return map-get($mq-breakpoints, $name);
	} @else {
		@warn "Breakpoint #{$name} does not exist";
	}
}

/**
 * Media Query mixin
 * Usage:
 * .element {
 *     @include mq($from: mobile) {
 *         color: red;
 *     }
 *     @include mq($to: tablet) {
 *         color: blue;
 *     }
 *     @include mq(mobile, tablet) {
 *         color: green;
 *     }
 *     @include mq($from: tablet, $and: '(orientation: landscape)') {
 *         color: teal;
 *     }
 *     @include mq(950px) {
 *         color: hotpink;
 *     }
 * }
 */

@mixin mq($from: false, $to: false, $and: false, $height: false) {

	// Initialize variables
	$min-size: 0;
	$max-size: 0;
	$mediaQuery: '';
	$axis: if($height, 'height', 'width');

	// From: this breakpoint (inclusive)
	@if $from {
		@if type-of($from) == number {
			$min-size: pxToEm($from, 16);
		} @else {
			$min-size: pxToEm(mq-get-breakpoint-width($from), 16);
		}
	}

	// To: that breakpoint (exclusive)
	@if $to {
		@if type-of($to) == number {
			$max-size: pxToEm($to, 16) - .01em;
		} @else {
			$max-size: pxToEm(mq-get-breakpoint-width($to), 16) - .01em;
		}
	}

	// Responsive support is disabled, rasterize the output outside @media blocks
	// The browser will rely on the cascade itself.
	@if ($mq-responsive == false) {
		$static-breakpoint-width: mq-get-breakpoint-width($mq-static-breakpoint);
		@if type-of($static-breakpoint-width) == number {
			$target-width: pxToEm($static-breakpoint-width, 16);
			// Output only rules that start at or span our target width
			@if ($and == false and ($min-width <= $target-width) and (($to == false) or ($max-width >= $target-width))) {
				@content;
			}
		} @else {
			// Throw a warning if $mq-static-breakpoint is not in the $mq-breakpoints list
			@warn "No static styles will be output: #{$static-breakpoint-width}";
		}
	}

		// Responsive support is enabled, output rules inside @media queries
	@else {
		@if $min-size != 0 { $mediaQuery: '#{$mediaQuery} and (min-#{$axis}: #{$min-size})'; }
		@if $max-size != 0 { $mediaQuery: '#{$mediaQuery} and (max-#{$axis}: #{$max-size})'; }
		@if $and { $mediaQuery: '#{$mediaQuery} and #{$and}'; }

		$mediaQuery: unquote(#{$mediaQuery});

		@media all #{$mediaQuery} {
			@content;
		}
	}
}

/**
 * Add a breakpoint
 * Usage: $mq-breakpoints: mq-add-breakpoint(tvscreen, 1920px);
 */
@function mq-add-breakpoint($name, $breakpoint) {
	$new-breakpoint: (#{$name}: $breakpoint);
	@return map-merge($mq-breakpoints, $new-breakpoint);
}
